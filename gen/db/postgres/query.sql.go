// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package postgres

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPost = `-- name: CreatePost :one
INSERT INTO posts (
    likes,
    views,
    title,
    body,
    user_id,
    created_at,
    updated_at
) VALUES (
    $1, $2, $3, $4, $5, $6, $7
)
RETURNING id, likes, views, title, body, user_id, created_at, updated_at, deleted_at
`

type CreatePostParams struct {
	Likes     int64
	Views     int64
	Title     string
	Body      string
	UserID    int64
	CreatedAt pgtype.Timestamptz
	UpdatedAt pgtype.Timestamptz
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (Post, error) {
	row := q.db.QueryRow(ctx, createPost,
		arg.Likes,
		arg.Views,
		arg.Title,
		arg.Body,
		arg.UserID,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Likes,
		&i.Views,
		&i.Title,
		&i.Body,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    identity_provider,
    email,
    username,
    avatar_url,
    about_me,
    created_at,
    updated_at
) VALUES (
    $1,$2,$3,$4,$5,$6,$7
)
RETURNING id, identity_provider, email, username, avatar_url, about_me, created_at, updated_at, deleted_at
`

type CreateUserParams struct {
	IdentityProvider string
	Email            string
	Username         string
	AvatarUrl        string
	AboutMe          string
	CreatedAt        pgtype.Timestamptz
	UpdatedAt        pgtype.Timestamptz
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.IdentityProvider,
		arg.Email,
		arg.Username,
		arg.AvatarUrl,
		arg.AboutMe,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.IdentityProvider,
		&i.Email,
		&i.Username,
		&i.AvatarUrl,
		&i.AboutMe,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getUserByEmailAndIDP = `-- name: GetUserByEmailAndIDP :one
SELECT id, identity_provider, email, username, avatar_url, about_me, created_at, updated_at, deleted_at
FROM users
WHERE deleted_at IS NULL
AND email = $1
AND identity_provider = $2
`

type GetUserByEmailAndIDPParams struct {
	Email            string
	IdentityProvider string
}

func (q *Queries) GetUserByEmailAndIDP(ctx context.Context, arg GetUserByEmailAndIDPParams) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmailAndIDP, arg.Email, arg.IdentityProvider)
	var i User
	err := row.Scan(
		&i.ID,
		&i.IdentityProvider,
		&i.Email,
		&i.Username,
		&i.AvatarUrl,
		&i.AboutMe,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT id, identity_provider, email, username, avatar_url, about_me, created_at, updated_at, deleted_at 
FROM users
WHERE deleted_at IS NULL AND id = $1
`

func (q *Queries) GetUserById(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRow(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.IdentityProvider,
		&i.Email,
		&i.Username,
		&i.AvatarUrl,
		&i.AboutMe,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const listRecentPosts = `-- name: ListRecentPosts :many
SELECT id, likes, views, title, body, user_id, created_at, updated_at, deleted_at
FROM posts
WHERE deleted_at IS NULL
AND id > $2
ORDER BY updated_at DESC
LIMIT $1
`

type ListRecentPostsParams struct {
	Limit  int32
	Cursor int64
}

func (q *Queries) ListRecentPosts(ctx context.Context, arg ListRecentPostsParams) ([]Post, error) {
	rows, err := q.db.Query(ctx, listRecentPosts, arg.Limit, arg.Cursor)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.Likes,
			&i.Views,
			&i.Title,
			&i.Body,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listRecentPostsWithUsers = `-- name: ListRecentPostsWithUsers :many
SELECT p.id, likes, views, title, body, user_id, p.created_at, p.updated_at, p.deleted_at, u.id, identity_provider, email, username, avatar_url, about_me, u.created_at, u.updated_at, u.deleted_at
FROM posts AS p
LEFT JOIN users AS u
ON p.deletes_at IS NULL AND p.user_id = u.id AND p.id > $2 
ORDER BY p.updated_at DESC
LIMIT $1
`

type ListRecentPostsWithUsersParams struct {
	Limit  int32
	Cursor int64
}

type ListRecentPostsWithUsersRow struct {
	ID               int64
	Likes            int64
	Views            int64
	Title            string
	Body             string
	UserID           int64
	CreatedAt        pgtype.Timestamptz
	UpdatedAt        pgtype.Timestamptz
	DeletedAt        pgtype.Timestamptz
	ID_2             pgtype.Int8
	IdentityProvider pgtype.Text
	Email            pgtype.Text
	Username         pgtype.Text
	AvatarUrl        pgtype.Text
	AboutMe          pgtype.Text
	CreatedAt_2      pgtype.Timestamptz
	UpdatedAt_2      pgtype.Timestamptz
	DeletedAt_2      pgtype.Timestamptz
}

func (q *Queries) ListRecentPostsWithUsers(ctx context.Context, arg ListRecentPostsWithUsersParams) ([]ListRecentPostsWithUsersRow, error) {
	rows, err := q.db.Query(ctx, listRecentPostsWithUsers, arg.Limit, arg.Cursor)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListRecentPostsWithUsersRow
	for rows.Next() {
		var i ListRecentPostsWithUsersRow
		if err := rows.Scan(
			&i.ID,
			&i.Likes,
			&i.Views,
			&i.Title,
			&i.Body,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.ID_2,
			&i.IdentityProvider,
			&i.Email,
			&i.Username,
			&i.AvatarUrl,
			&i.AboutMe,
			&i.CreatedAt_2,
			&i.UpdatedAt_2,
			&i.DeletedAt_2,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
